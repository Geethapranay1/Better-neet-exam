/* IMPORT */
import webcrypto from 'tiny-webcrypto';
function makeRNG(constructor) {
    let pool;
    let cursor = 0;
    return () => {
        if (!pool || cursor === pool.length) { // Replenishing pool
            pool = new constructor(65536 / (constructor.BYTES_PER_ELEMENT * 8));
            cursor = 0;
            webcrypto.getRandomValues(pool);
        }
        return pool[cursor++];
    };
}
;
function makeBitRNG(rng, bits) {
    let pool = 0;
    let cursor = bits;
    return () => {
        if (cursor === bits) { // Replenishing pool
            pool = rng();
            cursor = 0;
        }
        return (pool & (1 << cursor++)) ? 1 : 0;
    };
}
;
/* MAIN */
const RNG = {
    get1: makeBitRNG(makeRNG(Uint8Array), 8),
    get8: makeRNG(Uint8Array),
    get16: makeRNG(Uint16Array),
    get32: makeRNG(Uint32Array),
    get64: makeRNG(BigUint64Array)
};
/* EXPORT */
export default RNG;
